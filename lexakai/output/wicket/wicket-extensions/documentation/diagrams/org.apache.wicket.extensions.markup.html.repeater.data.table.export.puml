@startuml

    !include lexakai.theme
    
    title "org.apache.wicket.extensions.markup.html.repeater.data.table.export"
    
    abstract AbstractDataExporter
    abstract AbstractResourceStreamWriter
    abstract AbstractColumn
    abstract AbstractToolbar
    
    interface IExportableColumn
    interface IDataExporter
    interface Closeable
    
    IDataExporter <|-- AbstractDataExporter
    abstract class AbstractDataExporter
    {
        --(constructors)--
        +AbstractDataExporter(IModel<String>, String, String)
        --
        +AbstractDataExporter setContentType(String contentType)
        --(naming)--
        +AbstractDataExporter setDataFormatNameModel(IModel<String> dataFormatNameModel)
        +AbstractDataExporter setFileNameExtension(String fileNameExtension)
    }
    
    AbstractColumn <|-- AbstractExportableColumn
    IExportableColumn <|-- AbstractExportableColumn
    abstract class AbstractExportableColumn<T, S>
    {
        --(constructors)--
        +AbstractExportableColumn(IModel<String>)
        +AbstractExportableColumn(IModel<String>, S)
        --
        #Component createDisplayComponent(String componentId, IModel<?> dataModel)
    }
    
    AbstractDataExporter <|-- CSVDataExporter
    class CSVDataExporter
    {
        --(constructors)--
        +CSVDataExporter()
        --
        +char getDelimiter()
        +CSVDataExporter setDelimiter(char delimiter)
        #IConverterLocator getConverterLocator()
        #String quoteValue(String value)
        #IModel<T> wrapModel(IModel<T>)
        --(checks)--
        +boolean isExportHeadersEnabled()
        --(functional)--
        +CSVDataExporter setExportHeadersEnabled(boolean exportHeadersEnabled)
        --(primitive)--
        +String getCharacterSet()
        +char getQuoteCharacter()
        +CSVDataExporter setCharacterSet(String characterSet)
        +CSVDataExporter setQuoteCharacter(char quoteCharacter)
    }
    
    AbstractResourceStreamWriter <|-- ExportToolbar.DataExportResourceStreamWriter
    class ExportToolbar.DataExportResourceStreamWriter
    {
        --(constructors)--
        +DataExportResourceStreamWriter(IDataExporter, DataTable<?, ?>)
    }
    
    AbstractToolbar <|-- ExportToolbar
    class ExportToolbar
    {
        --(constructors)--
        +ExportToolbar(DataTable<?, ?>, IModel<String>)
        +ExportToolbar(DataTable<?, ?>, IModel<String>, IModel<String>)
        +ExportToolbar(DataTable<?, ?>)
        --
        #void calculateVisibility()
        #Component createExportLink(String componentId, IDataExporter)
        --(collection)--
        +ExportToolbar addDataExporter(IDataExporter)
        --(filesystem)--
        +IModel<String> getFileNameModel()
        +ExportToolbar setFileNameModel(IModel<String> fileNameModel)
        --(messaging)--
        +IModel<String> getMessageModel()
        +ExportToolbar setMessageModel(IModel<String> messageModel)
        --(time)--
        #Duration getCacheDuration()
    }
    
    Closeable <|-- CSVDataExporter.Grid
    class CSVDataExporter.Grid
    {
        --(constructors)--
        +Grid(Writer)
        --
        +void cell(String value)
        +void row()
    }
    
    interface IClusterable
    IClusterable <|-- IDataExporter
    interface IDataExporter
    {
        --
        +void exportData(IDataProvider<T>, List<IExportableColumn<T,?>> columns, OutputStream)
        +String getContentType()
        --(naming)--
        +IModel<String> getDataFormatNameModel()
        +String getFileNameExtension()
    }
    
    interface IColumn
    IColumn <|-- IExportableColumn
    interface IExportableColumn<T, S>
    {
        --
        +IModel<?> getDataModel(IModel<T> rowModel)
        +IModel<String> getDisplayModel()
    }
    
@enduml

