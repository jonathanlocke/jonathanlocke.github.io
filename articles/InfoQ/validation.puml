@startuml

    !include lexakai.theme
    
    title "Data - Validation"
    
    interface MessageCounter
    interface ValidationReporter
    interface Validator
    
    ValidationReporter <|-- BaseValidationReporter
    abstract class BaseValidationReporter
    {
    }
    
    Validator <|-- BaseValidator
    abstract class BaseValidator
    {
        --
        #void onValidate()
        #void validate(Validator)
        --(checks)--
        +boolean isInvalid()
        +boolean isValid()
        --(messaging)--
        #void fatal(String message, Object... parameters)
        #void problem(String message, Object... parameters)
        #void quibble(String message, Object... parameters)
        #void warning(String message, Object... parameters)
        --(validation)--
        #boolean fatalIf(boolean invalid, String message, Object... parameters)
        #boolean problemIf(boolean invalid, String message, Object... parameters)
        #boolean quibbleIf(boolean invalid, String message, Object... parameters)
        #void warningIf(boolean invalid, String message, Object... parameters)
    }
    
    interface Listener
    Listener <|-- MessageCounter
    interface MessageCounter
    {
        +Count count(Message.Status type)
        +Count count(Class<? extends Message> type)
        +Count countWorseThanOrEqualTo(Message.Status)
    }
    
    ObjectList <|-- MessageList
    MessageCounter <|-- MessageList
    class MessageList
    {
        +MessageList(Matcher<Message>)
        +MessageList(Maximum, Matcher<Message>)
        --(collection)--
        +StringList formatted()
        +ObjectList<Message> messages(Class<? extends Message> type)
        +StringList statistics(Message.Status... statuses)
        +StringList statisticsByType(Class<? extends Message>... types)
    }
    
    Validatable --> Validation : "how to validate"
    Validatable --> Validator : "provides"
    interface Validatable
    {
        +Validator validator(Validation type)
        +Validator validator()
        --(checks)--
        +boolean isValid()
        +boolean isValid(Listener)
    }
    
    Name <|-- Validation
    class Validation
    {
        +Validation(String)
        --(checks)--
        +boolean shouldValidate(Class<?> type)
        --(filtering)--
        +Validation exclude(Class<?> type)
        +Validation include(Class<?> type)
    }
    
    MessageList <|-- ValidationIssues
    class ValidationIssues
    {
        +ValidationIssues()
    }
    
    interface Listener
    Listener <|-- ValidationReporter
    interface ValidationReporter
    {
        +void report(Message)
    }
    
    Validator --> Listener : "reports to"
    interface Validator
    {
        +boolean validate(Listener)
        +boolean validate()
    }
    
@enduml

